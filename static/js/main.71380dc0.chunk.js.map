{"version":3,"sources":["redux/types.js","Components/TodoForm.jsx","redux/actions.js","Components/Todo.jsx","Components/TodoList.jsx","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["ADD_TODO","DELETE_TODO","UPDATE_TODO","TodoForm","useState","userValue","setUserValue","dispatch","useDispatch","onSubmit","e","todo","preventDefault","id","uuid","name","type","types","payload","autoComplete","FormControl","variant","InputLabel","htmlFor","className","OutlinedInput","autoFocus","placeholder","label","value","onChange","currentTarget","required","Button","color","aria-label","Todo","editable","setEditable","setName","onClickEdit","onBlurEdit","newObj","getState","newTodo","todos","filter","td","push","sort","a","b","updateTodo","target","onBlur","onClick","todoId","TodoList","useSelector","state","map","i","App","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71380dc0.chunk.js","sourcesContent":["export const ADD_TODO = 'todo/ADD_TODO';\nexport const DELETE_TODO = 'todo/DELETE_TODO';\nexport const UPDATE_TODO = 'todo/UPDATE_TODO';\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { v1 as uuid } from 'uuid';\nimport { addTodo } from '../redux/actions';\n\nimport {\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  Button,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport '../App.css';\n\nexport const TodoForm = () => {\n  const [userValue, setUserValue] = useState('');\n  let dispatch = useDispatch();\n\n  const onHandleChange = (e) => {\n    setUserValue(e.currentTarget.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      addTodo({\n        id: uuid(),\n        name: userValue,\n      })\n    );\n    setUserValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete={'off'}>\n      <FormControl variant=\"outlined\">\n        <InputLabel htmlFor=\"component-outlined\">Todo</InputLabel>\n        <span className=\"form-items\">\n          <OutlinedInput\n            id=\"component-outlined\"\n            autoFocus={true}\n            placeholder=\"Todo\"\n            label=\"Name\"\n            value={userValue}\n            onChange={onHandleChange}\n            required={true}\n            className=\"form-input\"\n          />\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            aria-label=\"add\"\n            className=\"button-add\"\n          >\n            <AddIcon />\n          </Button>\n        </span>\n      </FormControl>\n    </form>\n  );\n};\n","import * as types from './types';\n\nexport const addTodo = (todo) => ({\n  type: types.ADD_TODO,\n  payload: todo,\n});\n\nexport const deleteTodo = (todoId) => ({\n  type: types.DELETE_TODO,\n  payload: todoId,\n});\n\nexport const updateTodo1 = (id, name) => ({\n  type: types.UPDATE_TODO,\n  payload: { id, name },\n});\n\nexport const updateTodo = (todo) => (dispatch, getState) => {\n  let newTodo = getState().todos.filter((td) => td.id !== todo.id);\n  newTodo.push(todo);\n  newTodo.sort((a, b) => a.id - b.id);\n\n  dispatch({ type: types.UPDATE_TODO, payload: newTodo });\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo, updateTodo } from '../redux/actions';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DoneIcon from '@material-ui/icons/Done';\nimport '../App.css';\n\nexport const Todo = ({ todo }) => {\n  let dispatch = useDispatch();\n  const [editable, setEditable] = useState(false);\n  const [name, setName] = useState(todo.name);\n\n  let onClickEdit = () => {\n    if (editable) {\n      setName(todo.name);\n    }\n    setEditable(!editable);\n  };\n\n  const onBlurEdit = () => {\n    const newObj = {\n      id: todo.id,\n      name: name,\n    };\n    dispatch(updateTodo(newObj));\n  };\n\n  let onChangeEdit = (e) => setName(e.target.value);\n\n  return (\n    <div className=\"todo-item\">\n      <div className=\"item-text\">\n        {editable ? (\n          <input\n            type=\"text\"\n            autoFocus={true}\n            className=\"form-input-edit\"\n            value={name}\n            onChange={onChangeEdit}\n            onBlur={(e) => onBlurEdit()}\n          />\n        ) : (\n          todo.name\n        )}\n      </div>\n      <div>\n        {editable ? (\n          <DoneIcon onClick={onClickEdit} />\n        ) : (\n          <EditIcon onClick={onClickEdit} />\n        )}\n      </div>\n      <div\n        className=\"delete-item\"\n        onClick={() => dispatch(deleteTodo(todo.id))}\n      >\n        <DeleteIcon />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from './Todo';\nimport { useSelector } from 'react-redux';\n\nimport '../App.css';\n\nexport const TodoList = () => {\n  let todos = useSelector((state) => state?.todos);\n\n  return (\n    <div className=\"todo-list\">\n      {todos.map((todo, i) => {\n        return <Todo key={i} todo={todo} />;\n      })}\n    </div>\n  );\n};\n","import './App.css';\nimport { TodoForm } from './Components/TodoForm';\nimport { TodoList } from './Components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Task list</h1>\n      <TodoForm />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import * as types from './types';\n\nlet initialState = {\n  todos: [\n    { id: 1, name: 'One' },\n    { id: 2, name: 'Two' },\n    { id: 3, name: 'Three' },\n  ],\n};\n\nexport function reducer(state = initialState, action) {\n  const { payload } = action;\n\n  switch (action.type) {\n    case types.DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos.filter((todo) => todo.id !== payload)],\n      };\n    case types.ADD_TODO:\n      return { ...state, todos: [...state.todos, payload] };\n    case types.UPDATE_TODO:\n      return { ...state, todos: payload };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { reducer } from './reducer';\nimport thunk from 'redux-thunk';\n\nexport let store = createStore(reducer, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}